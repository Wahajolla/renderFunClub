############################  LICENSE  #########################
# <This software package is a plugin for Blender that uses the Crowdrender
# distributed rendering system.>
# Copyright (C) <2013-2021> Crowd Render Pty Limited, Sydney Australia
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# You can contact the creator of Crowdrender at info at
# crowdrender dot com dot au
################################################################

# <sort of PEP8 Compliant, lines are not always 79 chars long>

"""
crowdrender blender python package for crowd accelerated rendering 

This package implements a multi-process, multi-machine distributed 
rendering addon for Blender.

This package exports the following modules:

client - manage a user session across multiple nodes
CROWD_RENDER - define and register a RenderEngine subclass
hash_tree - define a custom hash tree for data checking between nodes
image_recombine - recombine parts of a single image rendered on other nodes
network_engine - manage network traffic between nodes
network_nodes - define a custom node tree for blenders node editor
node_sync - efficiently synchronise node data 
server - manage multiple user sessions on one node
settings - define settings for each scene
ui_operators - define Blender operators
ui_panels - define Blender panels
update_handler - handle events generated by changes to scene data

"""
# IMPORTS
import sys, os, logging
from os import listdir
from os.path import isdir


bl_info = {
    "name": "CrowdRender",
    "author": "www.crowd-render.com",
    "version": (0, 3, 1),
    "blender": (2, 80, 0),
    "location": "Render > Engine > Crowd Render",
    "description": "Network/Internet based rendering acceleration",
    "warning": "Alpha software, stability not guaranteed!",
    "wiki_url": "www.crowd-render.com",
    "tracker_url":"https://www.crowd-render.com/report-a-problem",
    "category": "Render"}

# Following the convention in 
# http://wiki.blender.org/index.php/Dev:2.5/Py/Scripts/Cookbook/Code_snippets/
# Multi-File_packages
# This block of code is used whenever blender is started to import the modules
# (.py files) of the crowdrender package. 

# PACKAGE GLOBALS
package_name = __name__
crowdrender_path = os.path.split(__file__)[0]


#Set path to include crowdrender so we can import subpackages like zmq

def select_platform():
    """ checks python/blender versions and sets import paths accordingly
    """
    
                    
    global cr_source
    
    if sys.platform.startswith('darwin'):
        set_sys_path('Darwin')

    
    elif sys.platform.startswith('linux'):
        set_sys_path('Linux')


    elif sys.platform.startswith('win'):
        set_sys_path('Win64')

    else:
        
        raise RuntimeError(" unsupported operating system! :" +\
                python_version +" Linux, MacOS and Win64 are supported")

    from . import src as cr_source
    
def get_blender_scripts_path():
    
    #first try the user path for scripts
    import bpy
    
    user_path = bpy.utils.user_resource('SCRIPTS', "addons", create=False)
    
    # if user_path == "":
        
        
def set_sys_path(platform_name):
    """ sets import paths to allow third party libs to be imported
        """
    
    #get python version
    major = sys.version_info.major
    minor = sys.version_info.minor

    python_any_platform = os.path.join(crowdrender_path, 'lib', 'any')
    python_platform_specific = os.path.join(crowdrender_path,
        'lib', platform_name, str(major) + "_" + str(minor))
    
    sys.path.append(python_any_platform)
    sys.path.append(python_platform_specific)

def register():
    
    select_platform()
    
    cr_source.register()
    
    
def unregister():
    
    if 'cr_platform' in globals():
    
        cr_source.unregister()
        
    else:
        print("dodgy, but trying to unregister anyway")
        
        cr_source.unregister()
        
#         raise RuntimeError("could not find the cr_platform while unregistering!")


if __name__ == '__main__':
    print("CR:INITIALISING")
    register()
